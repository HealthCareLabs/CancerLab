{"version":3,"sources":["../libs/auth/auth.js"],"names":[],"mappings":";;;;;AAGA,IAAI,WAAW,QAAQ,UAAR,CAAf;AACA,IAAI,gBAAgB,QAAQ,eAAR,EAAyB,aAA7C;AACA,IAAI,gBAAgB,QAAQ,gBAAR,EAA0B,QAA9C;AACA,IAAI,iBAAiB,QAAQ,mBAAR,EAA6B,QAAlD;AACA,IAAI,iBAAiB,QAAQ,+BAAR,EAAyC,QAA9D;AACA,IAAI,iBAAiB,QAAQ,iBAAR,EAA2B,QAAhD;AACA,IAAI,MAAM,QAAQ,QAAR,EAAkB,MAAlB,CAAV;AACA,IAAI,OAAO,QAAQ,GAAR,KAAgB,QAA3B;;AAEA,IAAI,SAAS,QAAQ,OAAO,QAAf,CAAb;;AAEA,IAAI,SAAS,QAAQ,OAAO,cAAf,CAAb;AACA,IAAI,UAAU,QAAQ,OAAO,eAAf,EAAgC,OAA9C;;;;;;;;;;;;;;;;;AAkBA,SAAS,aAAT,CAAuB,UAAU,IAAV,EAAgB,IAAhB,EAAsB;AACzC,SAAK,IAAL,EAAW,IAAX;AACH,CAFD;;AAIA,SAAS,eAAT,CAAyB,UAAU,IAAV,EAAgB,IAAhB,EAAsB;AAC3C,SAAK,IAAL,EAAW,IAAX;AACH,CAFD;;AAIA,SAAS,GAAT,CAAa,IAAI,cAAJ,CAAmB,EAAC,QAAQ,WAAT,EAAsB,mBAAmB,IAAzC,EAAnB,EACT,UAAU,GAAV,EAAe,KAAf,EAAsB,IAAtB,EAA4B;AACxB,YAAQ,OAAR,CAAgB,EAAC,QAAQ,KAAT,EAAhB,EAAiC,UAAU,GAAV,EAAe,OAAf,EAAwB;AACrD,YAAI,GAAJ,EAAS;AACL,mBAAO,KAAK,GAAL,CAAP;AACH;;AAED,YAAI,CAAC,OAAL,EAAc,OAAO,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAC,OAAO,gBAAR,EAAlB,CAAP;AACd,YAAI,CAAC,QAAQ,WAAR,CAAoB,KAApB,CAAL,EAAiC;AAC7B,mBAAO,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAC,OAAO,kBAAR,EAAlB,CAAP;AACH;AACD,YAAI,YAAJ,GAAmB,QAAnB;AACA,eAAO,KAAK,IAAL,EAAW,OAAX,CAAP;AACH,KAXD;AAYH,CAdQ,CAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA,SAAS,GAAT,CAAa,IAAI,aAAJ,CAAkB,EAAC,eAAe,OAAhB,EAAyB,eAAe,UAAxC,EAAoD,mBAAmB,IAAvE,EAAlB,EACT,UAAU,GAAV,EAAe,QAAf,EAAyB,QAAzB,EAAmC,IAAnC,EAAyC;AACrC,YAAQ,GAAR,CAAY,IAAI,IAAJ,CAAS,KAArB;AACA,YAAQ,GAAR,CAAY,IAAI,IAAJ,CAAS,QAArB;AACA,QAAI,CAAC,IAAI,OAAJ,CAAY,OAAjB,EAA0B;AACtB,YAAI,CAAC,IAAI,IAAJ,CAAS,KAAV,IAAmB,CAAC,IAAI,IAAJ,CAAS,QAAjC,EAA2C;AACvC,mBAAO,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAC,OAAO,wBAAR,EAAlB,CAAP;AACH,SAFD,MAGK;AACD,mBAAO,OAAP,CAAe,EAAC,OAAO,QAAR,EAAf,EAAkC,UAAU,GAAV,EAAe,MAAf,EAAuB;AACrD,oBAAI,KAAJ,CAAU,MAAV;AACA,oBAAI,GAAJ,EAAS;AACL,2BAAO,KAAK,GAAL,EAAU,KAAV,EAAiB,EAAC,OAAO,qBAAR,EAAjB,CAAP;AACH;AACD,oBAAI,CAAC,MAAL,EAAa;AACT,2BAAO,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAC,OAAO,qBAAR,EAAlB,CAAP;AACH;AACD,oBAAI,CAAC,OAAO,aAAP,CAAqB,IAAI,IAAJ,CAAS,QAA9B,CAAL,EAA8C;AAC1C,2BAAO,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAC,OAAO,qBAAR,EAAlB,CAAP;AACH;AACD,oBAAI,YAAJ,GAAmB,OAAnB;AACA,uBAAO,KAAK,IAAL,EAAW,MAAX,CAAP;AACH,aAbD;AAcH;AACJ,KApBD,MAoBO;AACH,eAAO,OAAP,CAAe,EAAC,WAAW,IAAI,OAAJ,CAAY,OAAxB,EAAf,EAAiD,UAAU,GAAV,EAAe,MAAf,EAAuB;AACpE,gBAAI,GAAJ,EAAS;AACL,uBAAO,KAAK,GAAL,EAAU,KAAV,EAAiB,EAAC,OAAO,qBAAR,EAAjB,CAAP;AACH;AACD,gBAAI,CAAC,MAAL,EAAa;AACT,uBAAO,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAC,OAAO,qBAAR,EAAlB,CAAP;AACH;AACD,mBAAO,KAAK,IAAL,EAAW,MAAX,CAAP;AACH,SARD;AAUH;AACD,QAAI,KAAJ,CAAU,MAAV;AAEH,CAtCQ,CAAb;;AAyCA,SAAS,GAAT,CAAa,IAAI,aAAJ,CACT,UAAU,KAAV,EAAiB,QAAjB,EAA2B,IAA3B,EAAiC;AAC7B,YAAQ,OAAR,CAAgB,EAAC,OAAO,KAAR,EAAhB,EAAgC,UAAU,GAAV,EAAe,OAAf,EAAwB;AACpD,YAAI,GAAJ,EAAS;AACL,gBAAI,KAAJ,CAAU,aAAV;AACA,mBAAO,KAAK,GAAL,CAAP;AACH;AACD,YAAI,CAAC,OAAL,EAAc;AACV,gBAAI,KAAJ,CAAU,cAAV;AACA,mBAAO,KAAK,IAAL,EAAW,KAAX,EAAkB,EAAC,OAAO,iCAAR,EAAlB,CAAP;AACH;AACD,YAAI,CAAC,QAAQ,aAAR,CAAsB,QAAtB,CAAL,EAAsC;AAClC,mBAAO,KAAK,IAAL,EAAW,KAAX,CAAP;AACH;AACD,eAAO,KAAK,IAAL,EAAW,OAAX,CAAP;AACH,KAbD;AAcH,CAhBQ,CAAb","file":"auth-compiled.js","sourcesContent":["/**\r\n * Created by AsTex on 25.06.2016.\r\n */\r\nvar passport = require('passport');\r\nvar BasicStrategy = require('passport-http').BasicStrategy;\r\nvar LocalStrategy = require('passport-local').Strategy;\r\nvar HeaderStrategy = require('passportjs-header').Strategy;\r\nvar headerStrategy = require('passport-http-header-strategy').Strategy;\r\nvar CustomStrategy = require('passport-custom').Strategy;\r\nvar log = require('../log')(module);\r\nvar libs = process.cwd() + '/libs/';\r\n\r\nvar config = require(libs + 'config');\r\n\r\nvar Doctor = require(libs + 'model/doctor');\r\nvar Patient = require(libs + 'model/patient').Patient;\r\n\r\n\r\n/*passport.use('header-own', new CustomStrategy(\r\n function(req, done) {\r\n Patient.findOne({apiKey:api}, function(err,patient){\r\n if (err) { return done(err); }\r\n if(!patient) return done(null, false, { error: 'Invalid token.' });\r\n if(!patient.checkApiKey(api)) {\r\n return done(null, false, {error: 'Incorrect token.'});\r\n }\r\n req.authStrategy = 'Header';\r\n return done(null,patient);\r\n });\r\n }\r\n ));\r\n */\r\n\r\npassport.serializeUser(function (user, done) {\r\n    done(null, user);\r\n});\r\n\r\npassport.deserializeUser(function (user, done) {\r\n    done(null, user);\r\n});\r\n\r\npassport.use(new headerStrategy({header: 'X-API-KEY', passReqToCallback: true},\r\n    function (req, token, done) {\r\n        Patient.findOne({apiKey: token}, function (err, patient) {\r\n            if (err) {\r\n                return done(err);\r\n            }\r\n            \r\n            if (!patient) return done(null, false, {error: 'Invalid token.'});\r\n            if (!patient.checkApiKey(token)) {\r\n                return done(null, false, {error: 'Incorrect token.'});\r\n            }\r\n            req.authStrategy = 'Header';\r\n            return done(null, patient);\r\n        });\r\n    }\r\n));\r\n/*\r\n passport.use('test', new CustomStrategy({passReqToCallback: true},\r\n function (req, done) {\r\n this._verify = done;\r\n log.debug('test');\r\n console.log(req.body.email);\r\n console.log(req.body.password);\r\n if (!req.cookies.session) {\r\n if (!req.body.email || !req.body.password) {\r\n return done(null, false, {error: 'Incorrect credentials.'});\r\n }\r\n else {\r\n Doctor.findOne({email: req.body.email}, function (err, doctor) {\r\n log.debug('test');\r\n if (err) {\r\n return done(err, false, {error: 'Incorrect username.'});\r\n }\r\n if (!doctor) {\r\n return done(null, false, {error: 'Incorrect username.'});\r\n }\r\n if (!doctor.checkPassword(req.body.password)) {\r\n return done(null, false, {error: 'Incorrect password.'});\r\n }\r\n req.authStrategy = 'Local';\r\n res.cookie('session', doctor.sessionId);\r\n return done(null, doctor);\r\n });\r\n }\r\n } else {\r\n Doctor.findOne({sessionId: req.cookies.session}, function (err, doctor) {\r\n if (err) {\r\n return done(err, false, {error: 'Incorrect username.'});\r\n }\r\n if (!doctor) {\r\n return done(null, false, {error: 'Incorrect username.'});\r\n }\r\n return done(null, doctor);\r\n });\r\n\r\n }\r\n log.debug('test');\r\n }));\r\n\r\n */\r\n\r\npassport.use(new LocalStrategy({usernameField: 'email', passwordField: 'password', passReqToCallback: true},\r\n    function (req, username, password, done) {\r\n        console.log(req.body.email);\r\n        console.log(req.body.password);\r\n        if (!req.cookies.session) {\r\n            if (!req.body.email || !req.body.password) {\r\n                return done(null, false, {error: 'Incorrect credentials.'});\r\n            }\r\n            else {\r\n                Doctor.findOne({email: username}, function (err, doctor) {\r\n                    log.debug('test');\r\n                    if (err) {\r\n                        return done(err, false, {error: 'Incorrect username.'});\r\n                    }\r\n                    if (!doctor) {\r\n                        return done(null, false, {error: 'Incorrect username.'});\r\n                    }\r\n                    if (!doctor.checkPassword(req.body.password)) {\r\n                        return done(null, false, {error: 'Incorrect password.'});\r\n                    }\r\n                    req.authStrategy = 'Local';\r\n                    return done(null, doctor);\r\n                });\r\n            }\r\n        } else {\r\n            Doctor.findOne({sessionId: req.cookies.session}, function (err, doctor) {\r\n                if (err) {\r\n                    return done(err, false, {error: 'Incorrect username.'});\r\n                }\r\n                if (!doctor) {\r\n                    return done(null, false, {error: 'Incorrect username.'});\r\n                }\r\n                return done(null, doctor);\r\n            });\r\n\r\n        }\r\n        log.debug('test');\r\n\r\n    }\r\n));\r\n\r\npassport.use(new BasicStrategy(\r\n    function (email, password, done) {\r\n        Patient.findOne({email: email}, function (err, patient) {\r\n            if (err) {\r\n                log.debug('Bad request');\r\n                return done(err);\r\n            }\r\n            if (!patient) {\r\n                log.debug('Bad request2');\r\n                return done(null, false, {error: \"No authentication data provided\"});\r\n            }\r\n            if (!patient.checkPassword(password)) {\r\n                return done(null, false);\r\n            }\r\n            return done(null, patient);\r\n        });\r\n    }\r\n));"]}